FILE: CallBasedInExpressionGenerator.kt
    public final class CallBasedInExpressionGenerator : R|class error: Symbol not found, for `InExpressionGenerator`| {
        public constructor(codegen: R|class error: Symbol not found, for `ExpressionCodegen`|, operatorReference: R|class error: Symbol not found, for `KtSimpleNameExpression`|): R|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator| {
            super<R|kotlin/Any|>()
        }

        public final val codegen: R|class error: Symbol not found, for `ExpressionCodegen`| = R|<local>/codegen|
            public get(): R|class error: Symbol not found, for `ExpressionCodegen`|

        private final val resolvedCall: <ERROR TYPE REF: Unresolved name: getResolvedCallWithAssert> = R|<local>/operatorReference|.<Unresolved name: getResolvedCallWithAssert>#(R|<local>/codegen|.<Unresolved name: bindingContext>#)
            private get(): <ERROR TYPE REF: Unresolved name: getResolvedCallWithAssert>

        private final val isInverted: R|kotlin/Boolean| = ==(R|<local>/operatorReference|.<Unresolved name: getReferencedNameElementType>#(), <Unresolved name: KtTokens>#.<Unresolved name: NOT_IN>#)
            private get(): R|kotlin/Boolean|

        public final override fun generate(argument: R|class error: Symbol not found, for `StackValue`|): R|class error: Symbol not found, for `BranchedValue`| {
            ^generate R?C|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator.gen|(R|<local>/argument|).<Inapplicable(WRONG_RECEIVER): [kotlin/let]>#(<L> = let@fun <anonymous>(): R|class error: Can't resolve when expression| {
                when () {
                    this@R|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator|.R|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator.isInverted| ->  {
                        <Unresolved name: Invert>#(<Unresolved name: it>#)
                    }
                    else ->  {
                        <Unresolved name: it>#
                    }
                }

            }
            )
        }

        private final fun gen(argument: R|class error: Symbol not found, for `StackValue`|): R|class error: Symbol not found, for `BranchedValue`| {
            ^gen object : R|class error: Symbol not found, for `BranchedValue`| {
                private constructor(): R|class error: Symbol not found, for `BranchedValue`| {
                    super<R|class error: Symbol not found, for `BranchedValue`|>(R|<local>/argument|, Null(null), R|<local>/argument|.<Unresolved name: type>#, <Unresolved name: Opcodes>#.<Unresolved name: IFEQ>#)
                }

                public final override fun putSelector(type: R|class error: Symbol not found, for `Type`|, kotlinType: R|class error: Symbol not found, for `KotlinType?`|, v: R|class error: Symbol not found, for `InstructionAdapter`|): R|kotlin/Unit| {
                    this@R|/anonymous|.R|/anonymous.invokeFunction|(R|<local>/v|)
                    <Unresolved name: coerceTo>#(R|<local>/type|, R|<local>/kotlinType|, R|<local>/v|)
                }

                public final override fun condJump(jumpLabel: R|class error: Symbol not found, for `Label`|, v: R|class error: Symbol not found, for `InstructionAdapter`|, jumpIfFalse: R|kotlin/Boolean|): R|kotlin/Unit| {
                    this@R|/anonymous|.R|/anonymous.invokeFunction|(R|<local>/v|)
                    R|<local>/v|.<Unresolved name: visitJumpInsn>#(when () {
                        R|<local>/jumpIfFalse| ->  {
                            <Unresolved name: Opcodes>#.<Unresolved name: IFEQ>#
                        }
                        else ->  {
                            <Unresolved name: Opcodes>#.<Unresolved name: IFNE>#
                        }
                    }
                    , R|<local>/jumpLabel|)
                }

                private final fun invokeFunction(v: R|class error: Symbol not found, for `InstructionAdapter`|): R|kotlin/Unit| {
                    lval result: <ERROR TYPE REF: Unresolved name: invokeFunction> = this@R|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator|.R|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator.codegen|.<Unresolved name: invokeFunction>#(this@R|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator|.R|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator.resolvedCall|.<Unresolved name: call>#, this@R|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator|.R|org/jetbrains/kotlin/codegen/range/inExpression/CallBasedInExpressionGenerator.resolvedCall|, <Unresolved name: none>#())
                    R|<local>/result|.<Unresolved name: put>#(R|<local>/result|.<Unresolved name: type>#, R|<local>/result|.<Unresolved name: kotlinType>#, R|<local>/v|)
                }

            }

        }

    }
